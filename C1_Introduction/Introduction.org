#+TITLE: Chapter 1: Introduction
[[https://craftinginterpreters.com/introduction.html][link]]
* outline
** 1.0
/book is light on theory, in favor of full overview of practical language
implementation/
** 1.1 why learn this stuff
 - domain-specific langauges are useful and widespread
 - languages are great programming exercise
** 1.2 how is the book organized
 1. 'orientation' chapters
 2. implementing Lox intepreter in Java
 3. implementing Lox interpreter in C
/most focus is on the implementation, with essays covering design as well/
** 1.3 first interpreter
 - written in Java to give good overview of all concepts
** 1.4 second interpreter
 - written in C to leverage speed and optimization,
 - as well as a better view of low-level implementation

* review concepts
 - _Curry-Howard isomorphism_:
   types correspond to prepositions, and values correspond to proofs.
   Theoretically, to prove a theorem: construct its type, then find a value
   of this type. Explained in detail [[https://en.wikibooks.org/wiki/Haskell/The_Curry%E2%80%93Howard_isomorphism][here]] and in more general terms [[https://stackoverflow.com/questions/10212660/curry-howard-isomorphism][here]],
   with some helpful slides [[https://www.xn--pdrot-bsa.fr/slides/inria-junior-02-15.pdf][here]]
* TODO challenges
 - /what are six domain-specific programming languages used to
   write/publish this book?/
   Markdown, Sass (syntacyically awesome style sheets), HTML, Dart, Make, CSS
   
 - /hello world in Java/
   hello world is a bit too simple, so I implemented [[https://leetcode.com/problems/longest-substring-without-repeating-characters/][this LeetCode problem]]
   instead: [[file:LongestSubstringOfUniqueCharacters.java::import java.util.HashMap;][Longest Substring Without Repeating Characters]]
   
 - /hello world in C/
